#version 450 core

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

// https://www.zap.org.au/projects/console-fonts-zap/zap-light16.pdf
// range 0x20 to 0x7f (inclusive)
const uint font_data[1536/4] = {
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 
    0x00000008, 0x08080808, 0x08080008, 0x08000000, 
    0x00242424, 0x24000000, 0x00000000, 0x00000000, 
    0x00000024, 0x24247E24, 0x247E2424, 0x24000000, 
    0x00000808, 0x3E494848, 0x3E090949, 0x3E080800, 
    0x00000031, 0x4A4A3408, 0x08162929, 0x46000000, 
    0x00000018, 0x24242418, 0x28454246, 0x39000000, 
    0x00080808, 0x10000000, 0x00000000, 0x00000000, 
    0x00000408, 0x08101010, 0x10101008, 0x08040000, 
    0x00002010, 0x10080808, 0x08080810, 0x10200000, 
    0x00000000, 0x0008492A, 0x1C2A4908, 0x00000000, 
    0x00000000, 0x00080808, 0x7F080808, 0x00000000, 
    0x00000000, 0x00000000, 0x00000008, 0x08081000, 
    0x00000000, 0x00000000, 0x7E000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000008, 0x08000000, 
    0x00000002, 0x02040408, 0x08101020, 0x20000000, 
    0x0000003C, 0x4242424A, 0x52424242, 0x3C000000, 
    0x00000008, 0x18280808, 0x08080808, 0x3E000000, 
    0x0000003C, 0x42420204, 0x08102040, 0x7E000000, 
    0x0000003C, 0x4242021C, 0x02024242, 0x3C000000, 
    0x00000004, 0x0C142444, 0x447E0404, 0x04000000, 
    0x0000007E, 0x4040407C, 0x02020242, 0x3C000000, 
    0x0000001C, 0x2040407C, 0x42424242, 0x3C000000, 
    0x0000007E, 0x02020404, 0x08081010, 0x10000000, 
    0x0000003C, 0x4242423C, 0x42424242, 0x3C000000, 
    0x0000003C, 0x42424242, 0x3E020204, 0x38000000, 
    0x00000000, 0x00000808, 0x00000008, 0x08000000, 
    0x00000000, 0x00000808, 0x00000008, 0x08081000, 
    0x00000000, 0x04081020, 0x40201008, 0x04000000, 
    0x00000000, 0x00007E00, 0x00007E00, 0x00000000, 
    0x00000000, 0x20100804, 0x02040810, 0x20000000, 
    0x0000003C, 0x42420204, 0x08080008, 0x08000000, 
    0x0000001C, 0x224A5652, 0x52524E20, 0x1E000000, 
    0x00000018, 0x24244242, 0x7E424242, 0x42000000, 
    0x0000007C, 0x4242427C, 0x42424242, 0x7C000000, 
    0x0000003C, 0x42424040, 0x40404242, 0x3C000000, 
    0x00000078, 0x44424242, 0x42424244, 0x78000000, 
    0x0000007E, 0x4040407C, 0x40404040, 0x7E000000, 
    0x0000007E, 0x4040407C, 0x40404040, 0x40000000, 
    0x0000003C, 0x42424040, 0x4E424242, 0x3C000000, 
    0x00000042, 0x4242427E, 0x42424242, 0x42000000, 
    0x0000003E, 0x08080808, 0x08080808, 0x3E000000, 
    0x0000001F, 0x04040404, 0x04044444, 0x38000000, 
    0x00000042, 0x44485060, 0x60504844, 0x42000000, 
    0x00000040, 0x40404040, 0x40404040, 0x7E000000, 
    0x00000041, 0x63635555, 0x49494141, 0x41000000, 
    0x00000042, 0x62625252, 0x4A4A4646, 0x42000000, 
    0x0000003C, 0x42424242, 0x42424242, 0x3C000000, 
    0x0000007C, 0x42424242, 0x7C404040, 0x40000000, 
    0x0000003C, 0x42424242, 0x42425A66, 0x3C030000, 
    0x0000007C, 0x4242427C, 0x48444442, 0x42000000, 
    0x0000003C, 0x42424030, 0x0C024242, 0x3C000000, 
    0x0000007F, 0x08080808, 0x08080808, 0x08000000, 
    0x00000042, 0x42424242, 0x42424242, 0x3C000000, 
    0x00000041, 0x41412222, 0x22141408, 0x08000000, 
    0x00000041, 0x41414949, 0x55556363, 0x41000000, 
    0x00000042, 0x42242418, 0x18242442, 0x42000000, 
    0x00000041, 0x41222214, 0x08080808, 0x08000000, 
    0x0000007E, 0x02020408, 0x10204040, 0x7E000000, 
    0x00001C10, 0x10101010, 0x10101010, 0x101C0000, 
    0x00000020, 0x20101008, 0x08040402, 0x02000000, 
    0x00003808, 0x08080808, 0x08080808, 0x08380000, 
    0x00081422, 0x41000000, 0x00000000, 0x00000000, 
    0x00000000, 0x00000000, 0x00000000, 0x007F0000, 
    0x00101010, 0x08000000, 0x00000000, 0x00000000, 
    0x00000000, 0x003C4202, 0x3E424246, 0x3A000000, 
    0x00004040, 0x405C6242, 0x42424262, 0x5C000000, 
    0x00000000, 0x003C4240, 0x40404042, 0x3C000000, 
    0x00000202, 0x023A4642, 0x42424246, 0x3A000000, 
    0x00000000, 0x003C4242, 0x7E404042, 0x3C000000, 
    0x00000E10, 0x10107C10, 0x10101010, 0x10000000, 
    0x00000000, 0x003A4642, 0x4242463A, 0x0202423C, 
    0x00004040, 0x405C6242, 0x42424242, 0x42000000, 
    0x00000808, 0x00180808, 0x08080808, 0x3E000000, 
    0x00000404, 0x000C0404, 0x04040404, 0x04044438, 
    0x00004040, 0x40444850, 0x60504844, 0x42000000, 
    0x00001808, 0x08080808, 0x08080808, 0x3E000000, 
    0x00000000, 0x00764949, 0x49494949, 0x49000000, 
    0x00000000, 0x005C6242, 0x42424242, 0x42000000, 
    0x00000000, 0x003C4242, 0x42424242, 0x3C000000, 
    0x00000000, 0x005C6242, 0x42424262, 0x5C404040, 
    0x00000000, 0x003A4642, 0x42424246, 0x3A020202, 
    0x00000000, 0x005C6240, 0x40404040, 0x40000000, 
    0x00000000, 0x003C4240, 0x300C0242, 0x3C000000, 
    0x00001010, 0x10107C10, 0x10101010, 0x0E000000, 
    0x00000000, 0x00424242, 0x42424246, 0x3A000000, 
    0x00000000, 0x00414141, 0x22221414, 0x08000000, 
    0x00000000, 0x00414149, 0x49494949, 0x36000000, 
    0x00000000, 0x00424224, 0x18182442, 0x42000000, 
    0x00000000, 0x00424242, 0x4242463A, 0x0202423C, 
    0x00000000, 0x007E0204, 0x08102040, 0x7E000000, 
    0x00000608, 0x08080830, 0x08080808, 0x08060000, 
    0x00000808, 0x08080808, 0x08080808, 0x08080000, 
    0x00003008, 0x08080806, 0x08080808, 0x08300000, 
    0x00314946, 0x00000000, 0x00000000, 0x00000000, 
    0x00000000, 0x0000183C, 0x3C180000, 0x00000000, 
};


// inputs 
layout (location = 0) in vec2 inTexCoord;
layout (location = 1) flat in uint inMsg; 

// outputs
layout (location = 0) out vec4 outFragColor;



void main(){



	vec2 st = inTexCoord.xy;


	// every two triangles encode four characters
	// we do this for extra efficiency. 

	// 16 bytes, each byte is one line in the character
	// 4 uints, each uint is 4 lines in the character 

	const uint msg_len = 4;
	ivec2 char_coord = ivec2(floor(st * vec2(8 * msg_len,16)));

	// our message is encoded as uint little endian
	// this should pass as a vertex attribute - if we 
	// can encode a uint32 as an attribute.
	uint msg = inMsg;

	// now we must pick up the correct uint from the array 
	uint char_code = msg >> 8 * (char_coord.x/8) & 0xff;
	
    if (char_code == 0x00){
        // we use the null char to pad any words that are 
        // not complete...
        discard;
    } 

    char_code -= 0x20; // lowest char is space, 0x20 hex

	char_coord.x = char_coord.x % 8;
	uint four_lines = font_data[char_coord.y/4 + 4 * char_code];

	// now we must pick the correct part of the uint

	// each uint contains four lines
	uint current_line  = (four_lines >> (8*(3-(char_coord.y)%4))) & 0xff;
	uint current_pixel = (current_line >> (7-char_coord.x)) & 0x01;

	vec3 color = vec3(current_pixel);
    // color.xy = char_coord / vec2(8,16);
	// color.xy = char_coord / vec2(8,16);
    color += vec3(0.4);


	outFragColor = vec4( color, 1 );
}